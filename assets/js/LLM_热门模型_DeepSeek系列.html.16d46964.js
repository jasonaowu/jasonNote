"use strict";(self.webpackChunklearn_data=self.webpackChunklearn_data||[]).push([[8364],{5618:(e,n,a)=>{a.r(n),a.d(n,{comp:()=>o,data:()=>s});var r=a(6254);const t={},o=(0,a(6995).A)(t,[["render",function(e,n){return(0,r.uX)(),(0,r.CE)("div",null,n[0]||(n[0]=[(0,r.Fv)('<h1 id="问题和结论" tabindex="-1"><a class="header-anchor" href="#问题和结论"><span>问题和结论</span></a></h1><ol><li><strong>MOE 能否做知识蒸馏？</strong> <strong>可以</strong></li><li><strong>MOE 相比 Dense 的优势？</strong> <strong>节约计算成本</strong></li><li><strong>什么结构能用 MOE？</strong> <strong>任何 FFN</strong> → 多任务问题</li><li><strong>在已知 MOE 有负载不均衡问题的前提下，为啥目前大模型都开始抛弃传统 Transformer 架构，转投 MOE？</strong> <strong>便宜</strong></li><li><strong>个人原来的理解：MOE 只能节约训练和推理的计算量，不能节约存储量；模型蒸馏可以节约计算量，也可以节约存储量，是否正确？</strong> <strong>正确</strong></li></ol><blockquote><p><strong>错误观点</strong>：</p><ol><li>MOE 是为了减小网络结构？ ❌，相反，MOE的初衷是为了在保证较低计算量的同时，增加模型参数，使模型更强</li></ol><p>原来以为MOE是针对深层网络做的优化，将深层网络变为浅层网络，但是实际是将中间层参数数量从 N，降低为 N/E，分散到E个专家上</p></blockquote><h2 id="moe-模型基本特性" tabindex="-1"><a class="header-anchor" href="#moe-模型基本特性"><span>MoE 模型基本特性</span></a></h2><p>与稠密模型相比，对于给定的计算预算，MoE 模型提供更高效的训练。这是因为门控网络仅将 token 发送到一部分专家，从而减少了计算负载。因此，模型的容量（其参数总数）可以增加，而不会成比例地增加计算需求。在推理期间，仅使用部分专家，因此 MoE 能够执行比稠密模型更快的推理。但是，整个模型需要加载到内存中，而仅仅是正在使用的专家。</p><p>MoE 中实现更高计算效率的稀疏性来自于这样一个事实：特定的 token 只会被路由到一部分专家。专家的数量以及如何选择专家取决于门控网络的实现，但一种常见的方法是 top k。门控网络首先预测每个专家的概率值，然后将 token 路由到 top k 个专家以获得输出。但是，如果所有 token 始终都发送到相同的专家子集，则训练效率会降低，而其他专家最终会训练不足。为了缓解这个问题，引入了负载均衡损失，以鼓励均匀路由到所有专家。</p><p>专家的数量和选择 top k 个专家是设计 MoE 的重要因素。更多的专家数量允许扩展到更大的模型，而不会增加计算成本。这意味着模型具有更高的学习能力，但是，超过某个点后，性能增益往往会减少。选择的专家数量需要与服务模型的推理成本相平衡，因为整个模型都需要加载到内存中。同样，在选择 top k 时，训练期间较低的 top k 会导致较小的矩阵乘法，如果通信成本足够大，则会浪费计算资源。但是，在推理期间，较高的 top k 通常会导致较慢的推理速度。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://kevincheung2259.github.io/2024/09/13/MOE-Intro/index.html" target="_blank" rel="noopener noreferrer">MOE 介绍</a></li><li><a href="https://deepseek.csdn.net/67fa2941da5d787fd5cb6acb.html" target="_blank" rel="noopener noreferrer">DeepSeek 技术解析</a></li></ul><h2 id="研究问题" tabindex="-1"><a class="header-anchor" href="#研究问题"><span>研究问题</span></a></h2><p>以 Transformer 原文中 FFN 部分的参数量进行计算，如果换成 MOE 架构，参数量是多少，为啥能够节约计算时间？</p><h2 id="deepseek-研究脉络" tabindex="-1"><a class="header-anchor" href="#deepseek-研究脉络"><span>DeepSeek 研究脉络</span></a></h2><p>💡 <strong>从稠密模型到混合专家，再到推理方向</strong></p><p>回顾 DeepSeek 过去一年多发表的核心论文，我们大致能将其研究分为两条主要脉络：</p><ul><li><strong>基座模型（Foundation Models）</strong>：从最早的 Dense（稠密）结构一路演进到 MOE（混合专家）模式，并在这个过程中不断发明和采用新的高效训练算法。</li><li><strong>推理能力（Reasoning）</strong>：包括解数学题、代码生成、逻辑问答乃至定理证明等，更强调大模型的&quot;思考深度&quot;，并在如何进行强化学习方面进行了连续多次创新。</li></ul><p>在阅读这份逐篇解读之前，可以先记住 DeepSeek 的几大特色：对实验和数据极度重视、有足够的冒险精神尝试新架构和新算法、且真正愿意分享内部研究细节，为社区提供可复现的技术报告。</p><h1 id="moe-基本原理" tabindex="-1"><a class="header-anchor" href="#moe-基本原理"><span>MOE 基本原理</span></a></h1><p>MOE 全称是 Mixture of Experts，也就是混合专家模型</p><h2 id="最最最原始版" tabindex="-1"><a class="header-anchor" href="#最最最原始版"><span>最最最原始版</span></a></h2><h3 id="组成" tabindex="-1"><a class="header-anchor" href="#组成"><span>组成</span></a></h3><ol><li><strong>稀疏 MOE 层</strong>：n 个专家 FFN</li><li><strong>路由</strong>：token 到 top-K 个专家</li></ol><p><img src="https://s08a4grxpw8.feishu.cn/space/api/box/stream/download/asynccode/?code=NWVjNjk1ZmU5YmUyNDA3ZGZlZGQ3MzljZWU5NzVhZWJfQ1pESDhYRFRIM1QwNVEwTzRJSVNCdWZOS1FkNHJ5Q2JfVG9rZW46UnA1M2Jja25Cb2c2MlJ4TTc5SGNtMFE1bmdlXzE3NDU1ODU4NTk6MTc0NTU4OTQ1OV9WNA" alt="MOE 基本结构" loading="lazy"><img src="https://s08a4grxpw8.feishu.cn/space/api/box/stream/download/asynccode/?code=NzMzNzMyZWE5ZDFkYjc1MTUwODE0OTViZjI4MWFjNGNfdTRrMVc0UXJnemtRekFWNTNhYzZwMXRBc2plak9naWZfVG9rZW46WE05UmJ3b0VNb05OUTN4MjdVTGNsSXYxbkNuXzE3NDU1ODU4NTk6MTc0NTU4OTQ1OV9WNA" alt="MOE 结构图2" loading="lazy"></p><h3 id="ffn-对比" tabindex="-1"><a class="header-anchor" href="#ffn-对比"><span>FFN 对比</span></a></h3><ul><li><strong>Vs Transformer</strong></li></ul><figure><img src="https://s08a4grxpw8.feishu.cn/space/api/box/stream/download/asynccode/?code=YjMwMmY0OTI2ZDQ0M2U5MDE2NzlkODc0OTQzNGFiMTNfY1Q3VlhRTGN3VjE4R05QVmF5UEoxbXpVR3hoeHRsb0dfVG9rZW46QU9ieWJvUjY1b3F4SU14c09Cb2NYbEd2bnJjXzE3NDU1ODU4NTk6MTc0NTU4OTQ1OV9WNA" alt="Transformer 对比" tabindex="0" loading="lazy"><figcaption>Transformer 对比</figcaption></figure><ul><li><strong>一般的 gating network 的计算，便于和 deepseek 做对比</strong></li></ul><figure><img src="https://s08a4grxpw8.feishu.cn/space/api/box/stream/download/asynccode/?code=NDkyY2U0NDQ0MzUyYjlmYTg0M2RiMzI2ZTBiNzFiMWZfc1ZwOFpyS1NhdUUwNnJFbGZnUGZkZDRaZnYzb2VpelRfVG9rZW46VEdOQWJnTURab1V1alZ4b3BHQmNmSm5mbldiXzE3NDU1ODU4NTk6MTc0NTU4OTQ1OV9WNA" alt="Gating Network" tabindex="0" loading="lazy"><figcaption>Gating Network</figcaption></figure><h3 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h3><ul><li>相比 dense 模型，<strong>预训练速度更快</strong></li><li>相比同参数量模型，<strong>推理速度更快</strong></li><li>但是需要高 VRAM，因为所有专家都加载在内存中</li></ul><h2 id="switch-transformer" tabindex="-1"><a class="header-anchor" href="#switch-transformer"><span>Switch Transformer</span></a></h2><figure><img src="https://s08a4grxpw8.feishu.cn/space/api/box/stream/download/asynccode/?code=YmE1MzdjZjA0Y2M2YmJhNzZjNGI3NTEyNzE2NmRlZTBfd1FBOXByWnVhUmt1Tm1xanRTcm5ZU0ZKRnhRMTlKTVhfVG9rZW46Umw1dWJJdFdpb3JqcU14NlZsNWNKa2pSbmhkXzE3NDU1ODU4NTk6MTc0NTU4OTQ1OV9WNA" alt="Switch Transformer" tabindex="0" loading="lazy"><figcaption>Switch Transformer</figcaption></figure><h1 id="deepseek-moe-2024-01" tabindex="-1"><a class="header-anchor" href="#deepseek-moe-2024-01"><span>DeepSeek MOE(2024.01)</span></a></h1><p>DeepSeek-V1 应该是 2023 年 12 月的 DeepSeek LLM Base 和 Chat 模型，是稠密模型。</p><p>DeepSeek-V2 及其之后的模型用的都是 MoE 了。</p><p><a href="https://arxiv.org/pdf/2401.06066" target="_blank" rel="noopener noreferrer">DeepSeek MOE 原文</a></p><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><ul><li>LLM 中，扩展模型参数时节约成本，故使用 MoE</li><li>Deepseek MOE 就是为了通过更加高效的机制来确保专家之间的任务分配具有更高的专门化性</li><li>无法确保专家的专门化。这种重叠会导致专家没有获得足够的独特知识，也使得专家之间的差异化不明显，限制了模型的性能和效率 <ul><li><strong>知识混杂性（Knowledge Hybridity）</strong>：在传统的 MoE 架构中，通常只使用有限数量的专家（例如 8 个或 16 个）。当某个 token 被分配给某个专家时，这些专家所涵盖的知识往往是多样化的，因此该专家的参数会试图同时存储和处理非常不同类型的知识。这种知识的多样性和复杂性导致专家的知识无法高度专注和聚焦，从而难以在同一模型中有效地利用这些不同类型的知识。</li></ul></li></ul>',37)]))}]]),s=JSON.parse('{"path":"/LLM/%E7%83%AD%E9%97%A8%E6%A8%A1%E5%9E%8B/DeepSeek%E7%B3%BB%E5%88%97.html","title":"DeepSeek系列","lang":"zh-CN","frontmatter":{"article":false,"title":"DeepSeek系列","order":2,"description":"问题和结论 MOE 能否做知识蒸馏？ 可以 MOE 相比 Dense 的优势？ 节约计算成本 什么结构能用 MOE？ 任何 FFN → 多任务问题 在已知 MOE 有负载不均衡问题的前提下，为啥目前大模型都开始抛弃传统 Transformer 架构，转投 MOE？ 便宜 个人原来的理解：MOE 只能节约训练和推理的计算量，不能节约存储量；模型蒸馏可以节...","head":[["meta",{"property":"og:url","content":"https://jasonaowu.github.io/jasonNote/jasonNote/LLM/%E7%83%AD%E9%97%A8%E6%A8%A1%E5%9E%8B/DeepSeek%E7%B3%BB%E5%88%97.html"}],["meta",{"property":"og:site_name","content":"JasonCC Blog"}],["meta",{"property":"og:title","content":"DeepSeek系列"}],["meta",{"property":"og:description","content":"问题和结论 MOE 能否做知识蒸馏？ 可以 MOE 相比 Dense 的优势？ 节约计算成本 什么结构能用 MOE？ 任何 FFN → 多任务问题 在已知 MOE 有负载不均衡问题的前提下，为啥目前大模型都开始抛弃传统 Transformer 架构，转投 MOE？ 便宜 个人原来的理解：MOE 只能节约训练和推理的计算量，不能节约存储量；模型蒸馏可以节..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://s08a4grxpw8.feishu.cn/space/api/box/stream/download/asynccode/?code=NWVjNjk1ZmU5YmUyNDA3ZGZlZGQ3MzljZWU5NzVhZWJfQ1pESDhYRFRIM1QwNVEwTzRJSVNCdWZOS1FkNHJ5Q2JfVG9rZW46UnA1M2Jja25Cb2c2MlJ4TTc5SGNtMFE1bmdlXzE3NDU1ODU4NTk6MTc0NTU4OTQ1OV9WNA"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-25T13:05:53.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-25T13:05:53.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"DeepSeek系列\\",\\"description\\":\\"问题和结论 MOE 能否做知识蒸馏？ 可以 MOE 相比 Dense 的优势？ 节约计算成本 什么结构能用 MOE？ 任何 FFN → 多任务问题 在已知 MOE 有负载不均衡问题的前提下，为啥目前大模型都开始抛弃传统 Transformer 架构，转投 MOE？ 便宜 个人原来的理解：MOE 只能节约训练和推理的计算量，不能节约存储量；模型蒸馏可以节...\\"}"]]},"git":{"createdTime":1744884980000,"updatedTime":1745586353000,"contributors":[{"name":"morepaperac","username":"morepaperac","email":"jasonaowu@163.com","commits":4,"url":"https://github.com/morepaperac"}]},"readingTime":{"minutes":5,"words":1500},"filePathRelative":"LLM/热门模型/DeepSeek系列.md","localizedDate":"2025年4月17日","excerpt":"\\n<ol>\\n<li><strong>MOE 能否做知识蒸馏？</strong> <strong>可以</strong></li>\\n<li><strong>MOE 相比 Dense 的优势？</strong> <strong>节约计算成本</strong></li>\\n<li><strong>什么结构能用 MOE？</strong> <strong>任何 FFN</strong> → 多任务问题</li>\\n<li><strong>在已知 MOE 有负载不均衡问题的前提下，为啥目前大模型都开始抛弃传统 Transformer 架构，转投 MOE？</strong> <strong>便宜</strong></li>\\n<li><strong>个人原来的理解：MOE 只能节约训练和推理的计算量，不能节约存储量；模型蒸馏可以节约计算量，也可以节约存储量，是否正确？</strong> <strong>正确</strong></li>\\n</ol>","autoDesc":true}')},6995:(e,n)=>{n.A=(e,n)=>{const a=e.__vccOpts||e;for(const[e,r]of n)a[e]=r;return a}}}]);